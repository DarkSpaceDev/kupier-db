Statement = _{ SOI ~ (Query) ~ EOI }

Query = { IdentifierStmt ~ AtomicClause* }

IdentifierStmt = { IdentifierPath ~ IdentifierAlias? }
IdentifierAlias = { ^"AS" ~ Identifier }
IdentifierPath = ${ Identifier ~ (IdentifierSeparator ~ Identifier)* }
Identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
IdentifierSeparator = @{ RightArrow | DotOperator }
ArrayRightArrow = ${ Array ~ RightArrow }
Array = ${ "[]" }
RightArrow = ${ "->" }
DotOperator = ${ "." }

// A single line clause
AtomicClause = _{ Pipe ~ (WhereClause) }
WhereClause = { ^"WHERE" ~ BinaryExpr }
BinaryTerm = { IdentifierPath|ScalarValue|"(" ~ BinaryExpr ~ ")" }
BinaryExpr = { BinaryTerm ~ (BinaryOp ~ BinaryTerm)+ }
BinaryOp = { ComparisonOp | LogicalOp }
ComparisonOp = _{ Lt | LtEq | Gt | GtEq | Ne | Eq }
LogicalOp = _{ And | Or }

Lt = ${ "<" }
LtEq = ${ "<=" }
Gt = ${ ">" }
GtEq = ${ ">=" }
Eq = ${ "=" | ^"IS" }
Ne = ${ "!=" | "<>" | ^"IS NOT" }
Pipe = _{ "|" }
Negative = ${ "-" }
And = ${ "&&" | ^"AND" }
Or = ${ "||" | ^"OR" }

ScalarValue = { Decimal | Int | String | Boolean | Null | Undefined }
Decimal = @{ Negative? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
Int = @{ Negative? ~ ASCII_DIGIT+ }
Boolean = @{ ^"true" | ^"false" }
Null = @{ ^"NULL" }
Undefined = @{ ^"UNDEFINED" }

String = @{ "\"" ~ Inner ~ "\"" }
Inner = _{ (!("\"" | "\\" | "\u{0000}" | "\u{001F}") ~ ANY)* ~ (Escape ~ Inner)? }
Escape  = _{ "\\" ~ ("b" | "t" | "n" | "f" | "r" | "\"" | "\\" | Unicode | NEWLINE)? }
Unicode = _{ "u" ~ ASCII_HEX_DIGIT{4} | "U" ~ ASCII_HEX_DIGIT{8} }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT    = _{ ("#" | "//" | "--") ~ (!NEWLINE ~ ANY)* }